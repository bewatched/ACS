What You Need
=============

Readers should feel very much encouraged to follow at their computers the steps described in the chapters below, switching between this tutorial and the real software.

Getting Eclipse IDE
-------------------

The Java parts of the ACS framework were developed using the Eclipse IDE. Eclipse is not one of the “official” ALMA standards, but a majority of ALMA developers finds it so helpful that I like to recommend getting it. You can download Eclipse for free from [Ref10]_ or use the one provided by your linux distribution. The latest milestone build is usually fine, but special plugins may require to use a released version. Just remember the minimum java version requiements for ACS releases:

========== ======
previous   jdk1.6
ACS 2014.6 jdk1.7
ACS 2015.2 jdk1.8
========== ======

Additionally, there is an Eclipse plugin that includes automatically ACS jarfiles as system or user libraries [Ref11]_. We recommend the use of this plugin, as most of the classes that you will be dealing with are in in the ACSROOT, INTROOT or INTLISTROOT directories (see [Ref8]_).


Getting the source code
-----------------------

The ACS release (ACS 2014.6 for this document) contains source code inside the delivered jar files, both for the implementation of the container, compiled IDL files etc, as well as for the examples used in this tutorial.

Automatically generated documentation and the source code for the examples can also be found online at
http://www.eso.org/projects/alma/develop/acs/OnlineDocs/jcontexmpl/doc/html/index.html. 

A live web-based git view for all relevant ACS modules is at https://github.com/ACS-Community/ACS/tree/master/LGPL/CommonSoftware

The modules that play a major role in the Java container/component part of ACS are listed below in compile order, together with the jar files they produce.

=====================  ===========================================  ========================
ACS Module             Description                                  Product/Artifact
=====================  ===========================================  ========================
jacsutil               Misc. utility classes, test support          jACSUtil.jar
acserr                 Exception handling                           acserr.jar, acserrj.jar
xmljbind Tools/castor  Java binding classes for XML                 xmljbind.jar, castor.jar
                       (schema compiler, runtime) based on Castor   
comphelpgen            Java code generator for component helper     comphelpgen.jar
                       classes, see 6
XmlIdl                 ACS IDL compiler (produces XML binding       xmlidl.jar
                       class aware component interfaces)
define                 IDL and XML schema files that are part of    xmlentity.jar,
                       the framework; Archive IDL                   archive_xmlstore_if.jar,
                                                                    systementities.jar
acstestentities        IDL and XML schema files used for demos      acsTestEntities.jar
                       and testing; forked from ObsPrep
acsjlog                Logging                                      acsjlog.jar
jcont                  Java container, component interfaces         jcont.jar
jcontexmpl             Examples used in this tutorial, other        HelloDemo.jar,
                       examples (e.g. used for testing)             XmlComponent.jar,
                                                                    BrightLamp.jar,
                                                                    BrightUser.jar,
                                                                    jcontexmpl.jar       
=====================  ===========================================  ========================

Here’s an overview of the directories and files in the module **jcontexmpl**:

========  ==========================   =====================================================
/doc                                   Nothing too exciting since the API documentation is 
                                       generated by the Makefile and is not supposed to be 
                                       checked in.
/idl      HelloDemo.idl                definition of the HelloDemo component used in this 
                                       tutorial

          XmlComponent.idl             definition of the XmlComponent component used in 
                                       this tutorial
          EventComponent.idl           other demo components not considered in this tutorial
          LampAccess.idl
          LampCallback.idl
          ErrorSystemComponent.idl     definition of errors with certain types and codes, 
          ErrorSystemComponent.xml     see [Ref6]_
/include                               not used, but required by build system
/lib      jcontexmpl.jar               compilation of /src, produced by running the Makefile 
                                       in /src
          HelloDemo.jar,               compilation of /idl/HelloDemo.idl 
          XmlComponent.jar,            compilation of /idl/XmlComponent.idl 
          other .jar, .so, .a files    output of Java/C++ IDL compilation of the IDL files
/object                                not used, but required by build system
/src                                   demo components and test clients
/test                                  tests internal to ACS that use the demo components
========  ==========================   =====================================================


Compiling and running the examples
----------------------------------

To compile and run the software, you need a current installation of ACS. The basic concepts for Java components have not changed since ACS 3.0 though.

Make
````

The */src* and */test* directories each contain a Makefile. The command::

    make clean all

will compile IDL and Java code and pack the results into jar files.::

    make install
   
will copy IDL, schema, and jar files to the respective sub-directories of your INTROOT directory so that they are available for other modules.

To learn about using the make system, refer to “man acsMakefile” and “man javaMakefile”.

Run
```

To run the container, you must first start the ACS services & manager. Either use the graphical ACS Command Center (see [Ref5]_), or the command::

    acsStart

Make sure your ACS_CDB variable points to the CDB installation that you want to use. You find a CDB suitable for the examples under jcontexmpl/test in CVS. You could either use that CDB directly, or merge the entries from Components.xml into your $ACS_CDB/CDB/MACI/Components/Components.xml.

To run the container on the same machine where the Manager runs, use the command ::

    acsStartContainer –java <containername>

For cases where the manager runs on a different machine, please refer to [Ref3]_ (“FAQGeneralCompContainerOptions”).

To terminate a Java container, you can use the command line::

    acsStopContainer <containername>

or the brute-force approach with Ctrl-C on the container console; in this case the Manager will attempt to reload components in that container next time the container runs.
The rest of ACS you terminate with::

    acsStop
or ::
    killACS
if all else fails.

Using an IDE (Debugging!)
`````````````````````````

The recommended method is Java remote debugging, which is described in the ACS FAQs [Ref3]_ under “How do I debug my components?”. [1]_

.. [1] The ACS FAQ will describe the setup in more detail.

Windows development with limitations
````````````````````````````````````

Windows aficionados can run the Java container with its components (or just a client application that accesses components) on a Windows machine that has a network connection to another machine where the rest of ACS is running. Different subversions of JDK 1.4 have worked fine on Windows.

The build process (make) is not available under Windows. Assuming you have ACS installed on a Linux machine, you should keep your source code there, and mount the directories on Windows, e.g. using Samba1. The initial compilation must be done on Linux to compile IDL etc. Subsequent plain Java compilations can then be done from Windows. 

There is an issue with CR/LF line termination: if you get ASCII sources from CVS on Windows, they come with Windows line breaks; the build process runs on Linux though, and a few tools will fail without telling you why. The Makefile itself and the IDL files are affected. In case of doubt, run dos2unix on them, e.g. ::

    ~/CVSPRJ/ACS/jcontexmpl/src 1001 > dos2unix Makefile

Logging
```````

By default, log messages are sent to the local console and to the central ACS logger. There they simply get absorbed in the void if you don’t register for them. For example,::

    acsStartLoggingClient | tee mylog.xml

will send all logs messages to the file mylog.xml and also to the console where you typed the command.

To adjust the log levels that get through, you may provide your own Java logging properties file. It must be compliant to the JDK 1.4 logging spec. Refer to the FAQ for the details. As a template for the properties file, you could use almalogging.properties from acsjlog/src.

There is also a graphical application “LoggingClient” that you can start with the command::

    jlog